import { useState, useEffect, useRef } from 'react';
import { useParams } from 'react-router-dom';
import { 
  Box, 
  Heading, 
  Table, 
  Thead, 
  Tbody, 
  Tr, 
  Th, 
  Td, 
  TableContainer, 
  Select, 
  useToast, 
  Spinner, 
  Center, 
  Text, 
  HStack, 
  Button, 
  AlertDialog,
  AlertDialogBody,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogContent,
  AlertDialogOverlay,
  useDisclosure,
  IconButton
} from '@chakra-ui/react';
import { DeleteIcon, AddIcon } from '@chakra-ui/icons';
import TableRowForm from '../components/TableRowForm';
import { api } from '../api/api';

interface TableRow {
  [key: string]: any;
  id?: number;
  created_at?: string;
  updated_at?: string;
}

export default function ProjectTables() {
  const { projectId = '' } = useParams<{ projectId: string }>();
  const [tables, setTables] = useState<string[]>([]);
  const [selectedTable, setSelectedTable] = useState<string>('');
  const [isDeleting, setIsDeleting] = useState(false);
  const [tableToDelete, setTableToDelete] = useState<string | null>(null);
  const [isAddRowOpen, setIsAddRowOpen] = useState(false);
  const [tableData, setTableData] = useState<TableRow[]>([]);
  const [columns, setColumns] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const toast = useToast();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const cancelRef = useRef<HTMLButtonElement>(null);

  // Fetch tables for the current project
  useEffect(() => {
    const fetchTables = async () => {
      if (!projectId) return;
      
      try {
        setIsLoading(true);
        const response = await api.get(`/marketing/${projectId}/tables`);
        
        if (!response.data?.tables?.length) {
          toast({
            title: 'No se encontraron tablas',
            description: `No se encontraron tablas para el proyecto ${projectId}`,
            status: 'warning',
            duration: 5000,
            isClosable: true,
          });
          setTables([]);
          return;
        }
        
        // Filter out consolidated views and system tables
        const validTables = response.data.tables.filter((table: string) => {
          return !table.endsWith('_consolidado') && 
                 !table.startsWith('v_') && 
                 table.startsWith('presupuesto_mercadeo_');
        });
        
        setTables(validTables);
        if (validTables.length > 0) {
          setSelectedTable(validTables[0]);
        }
      } catch (error) {
        console.error('Error fetching tables:', error);
        toast({
          title: 'Error',
          description: 'No se pudieron cargar las tablas del proyecto',
          status: 'error',
          duration: 5000,
          isClosable: true,
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchTables();
  }, [projectId, toast]);

  // Fetch table data when selected table changes
  useEffect(() => {
    const fetchTableData = async () => {
      if (!selectedTable) return;
      
      try {
        setIsLoading(true);
        const response = await api.get(`/marketing/${projectId}/table/${selectedTable}`);
        
        if (response.data?.data?.length > 0) {
          // Get columns from the first row
          const firstRow = response.data.data[0];
          const columnNames = Object.keys(firstRow);
          setColumns(columnNames);
          setTableData(response.data.data);
        } else {
          setColumns([]);
          setTableData([]);
        }
      } catch (error) {
        console.error('Error fetching table data:', error);
        toast({
          title: 'Error',
          description: 'No se pudieron cargar los datos de la tabla',
          status: 'error',
          duration: 5000,
          isClosable: true,
        });
      } finally {
        setIsLoading(false);
      }
    };

    const timer = setTimeout(() => {
      fetchTableData();
    }, 500);

    return () => clearTimeout(timer);
  }, [selectedTable, projectId, toast]);

  const handleDeleteTable = async (tableName: string) => {
    if (!tableName) return;
    
    try {
      setIsDeleting(true);
      await api.delete(`/marketing/${projectId}/table/${tableName}`);
      
      // Remove the table from the list
      const updatedTables = tables.filter(table => table !== tableName);
      setTables(updatedTables);
      
      // If the deleted table was selected, select the first available table or clear selection
      if (selectedTable === tableName) {
        setSelectedTable(updatedTables[0] || '');
      }
      
      toast({
        title: 'Tabla eliminada',
        description: `La tabla "${formatTableName(tableName)}" ha sido eliminada correctamente`,
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
    } catch (error) {
      console.error('Error deleting table:', error);
      toast({
        title: 'Error al eliminar la tabla',
        description: 'No se pudo eliminar la tabla. Por favor, inténtalo de nuevo.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsDeleting(false);
      onClose();
    }
  };

  const handleAddRow = async (data: Record<string, any>) => {
    if (!selectedTable) return;
    
    try {
      setIsLoading(true);
      
      // Send the new row data to the backend
      await api.post(`/marketing/${projectId}/table/${selectedTable}`, data);
      
      // Refresh the table data
      const response = await api.get(`/marketing/${projectId}/table/${selectedTable}`);
      if (response.data?.data) {
        setTableData(response.data.data);
      }
      
      toast({
        title: 'Fila agregada',
        description: 'La nueva fila se ha agregado correctamente',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
      
      setIsAddRowOpen(false);
    } catch (error) {
      console.error('Error adding row:', error);
      toast({
        title: 'Error al agregar fila',
        description: 'No se pudo agregar la fila. Por favor, inténtalo de nuevo.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Format the project name for display
  const formatProjectName = (id: string) => {
    return id
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  };

  // Format table name for display
  const formatTableName = (tableName: string) => {
    try {
      // Extract the part after the project ID
      const parts = tableName.split('_');
      if (parts.length < 4) return tableName; // Not a valid table name format
      
      // Get the table type (everything after presupuesto_mercadeo_[project_id]_)
      const tableType = parts.slice(3).join('_');
      
      // Map of table type suffixes to display names
      const displayNames: Record<string, string> = {
        'gastos_publicitarios': 'Gastos Publicitarios',
        'gastos_casa_modelo': 'Gastos Casa Modelo',
        'ferias_eventos': 'Ferias y Eventos',
        'redes_sociales': 'Redes Sociales',
        'promociones_bonos': 'Promociones y Bonos',
        'gastos_tramites': 'Gastos de Trámites'
      };
      
      // Return the display name if it exists, otherwise format the key
      return displayNames[tableType] || 
        tableType
          .split('_')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ');
    } catch (error) {
      console.error('Error formatting table name:', error);
      return tableName; // Return original name if there's an error
    }
  };

  // Handle empty table state
  if (tables.length === 0) {
    return (
      <Box p={4} textAlign="center">
        <Heading mb={6}>
          Tablas de Presupuesto - Proyecto {formatProjectName(projectId)}
        </Heading>
        <Text>No se encontraron tablas para este proyecto.</Text>
      </Box>
    );
  }

  // Handle loading state
  if (isLoading) {
    return (
      <Center h="200px">
        <Spinner size="xl" />
      </Center>
    );
  }

  return (
    <Box p={4}>
      <Heading mb={6}>
        Tablas de Presupuesto - Proyecto {formatProjectName(projectId)}
      </Heading>
      
      <HStack spacing={4} mb={6}>
        <Select
          value={selectedTable}
          onChange={(e) => setSelectedTable(e.target.value)}
          maxW="400px"
        >
          {tables.map((table) => (
            <option key={table} value={table}>
              {formatTableName(table)}
            </option>
          ))}
        </Select>
        
        <Button
          leftIcon={<AddIcon />}
          colorScheme="green"
          onClick={() => setIsAddRowOpen(true)}
          isDisabled={!selectedTable || isDeleting}
        >
          Agregar Fila
        </Button>
        
        <IconButton
          aria-label="Eliminar tabla"
          icon={<DeleteIcon />}
          colorScheme="red"
          variant="outline"
          onClick={() => {
            setTableToDelete(selectedTable);
            onOpen();
          }}
          isDisabled={!selectedTable || isDeleting}
          isLoading={isDeleting}
        />
      </HStack>
      
      {tableData.length > 0 ? (
        <TableContainer>
          <Table variant="striped" colorScheme="gray">
            <Thead>
              <Tr>
                {columns.map((column) => (
                  <Th key={column}>
                    {column.split('_').map(word => 
                      word.charAt(0).toUpperCase() + word.slice(1)
                    ).join(' ')}
                  </Th>
                ))}
              </Tr>
            </Thead>
            <Tbody>
              {tableData.map((row, rowIndex) => (
                <Tr key={row.id || rowIndex}>
                  {columns.map((column) => (
                    <Td key={`${rowIndex}-${column}`}>
                      {typeof row[column] === 'object' 
                        ? JSON.stringify(row[column]) 
                        : String(row[column] ?? '')}
                    </Td>
                  ))}
                </Tr>
              ))}
            </Tbody>
          </Table>
        </TableContainer>
      ) : (
        <Box 
          p={8} 
          borderWidth="1px" 
          borderRadius="md" 
          textAlign="center"
          borderColor="gray.200"
        >
          <Text fontSize="lg" mb={4}>
            La tabla está vacía. ¿Desea agregar una nueva fila?
          </Text>
          <Button 
            colorScheme="green" 
            leftIcon={<AddIcon />}
            onClick={() => setIsAddRowOpen(true)}
            isLoading={isLoading}
            loadingText="Agregando..."
          >
            Agregar Fila
          </Button>
        </Box>
      )}
      
      {/* Add Row Form Modal */}
      <TableRowForm
        isOpen={isAddRowOpen}
        onClose={() => setIsAddRowOpen(false)}
        onSubmit={handleAddRow}
        columns={columns.filter(col => !['id', 'created_at', 'updated_at'].includes(col))}
      />
      
      {/* Delete Confirmation Dialog */}
      <AlertDialog
        isOpen={isOpen}
        leastDestructiveRef={cancelRef}
        onClose={onClose}
      >
        <AlertDialogOverlay>
          <AlertDialogContent>
            <AlertDialogHeader fontSize="lg" fontWeight="bold">
              Eliminar Tabla
            </AlertDialogHeader>

            <AlertDialogBody>
              ¿Estás seguro de que deseas eliminar la tabla "{tableToDelete ? formatTableName(tableToDelete) : ''}"?
              Esta acción no se puede deshacer.
            </AlertDialogBody>

            <AlertDialogFooter>
              <Button ref={cancelRef} onClick={onClose} isDisabled={isDeleting}>
                Cancelar
              </Button>
              <Button 
                colorScheme="red" 
                onClick={() => tableToDelete && handleDeleteTable(tableToDelete)} 
                ml={3}
                isLoading={isDeleting}
              >
                Eliminar
              </Button>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialogOverlay>
      </AlertDialog>
    </Box>
  );
}
